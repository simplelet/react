1.JSX 其实就是 JavaScript 对象; react-dom 负责把JSX变成DOM元素，并且渲染到页面上。

2.事件绑定
 (1) <div className="test" onClick={this.handleFun.bind(this, arg, ...)}>TEST</div>
 (2) <div className="test" onClick={e => this.handleFun(e, arg, ...)}>TEST</div>

3.子组件向父组件传递数据
	父组件：
	<Parent handleData={this.handleChildData.bind(this)}/>
	handleChildData(data){console.log(data)} //{username, content}
	
	子组件
	if(this.props.handleData) {
		const {username, content} = this.state;
		this.props.handleData({username, content});
	}
	
	当某个状态被多个组件依赖或者影响的时候，就把该状态提升到这些组件的最近公共父组件中(子传父)去管理，用 props 传递数据或者函数来管理这种依赖或着影响的行为。

4.state 是让组件控制自己的状态，props 是让外部对组件自己进行配置。
  尽量少地用 state，尽量多地用 props

5.往 {} 放一个数组，React.js 会帮你把数组里面一个个元素罗列并且渲染出来。
  {users.map((user) => <User user={user} />)}
  
6.一般会把组件的 state 的初始化工作放在 constructor 里面去做；在 componentWillMount 进行组件的启动工作，例如 Ajax 数据拉取、定时器的启动；组件从页面上销毁的时候，有时候需要一些数据的清理，例如定时器的清理，就会放在 componentWillUnmount 里面去做。
有些组件的启动工作是依赖 DOM 的，例如动画的启动，而 componentWillMount 的时候组件还没挂载完成，所以没法进行这些启动工作，这时候就可以把这些操作放在 componentDidMount 当中。
shouldComponentUpdate(nextProps, nextState)：可以通过这个方法控制组件是否重新渲染。如果返回 false 组件就不会重新渲染。这个生命周期在 React.js 性能优化上非常有用。
componentWillReceiveProps(nextProps)：组件从父组件接收到新的 props 之前调用。
componentWillUpdate()：组件开始重新渲染之前调用。
componentDidUpdate()：组件重新渲染并且把更改变更到真实的 DOM 以后调用。

7.在 React.js 中你需要把 CSS 属性变成一个对象再传给元素
<h1 style={{fontSize: '12px', color: this.state.color}}>React.js 小书</h1>

8.高阶组件就是一个函数，传给它一个组件，它返回一个新的组件。新的组件使用传入的组件作为子组件。
  const NewComponent = higherOrderComponent(OldComponent)