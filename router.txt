1.react-router 核心组件
  react-router-dom 应用于浏览器端的路由库（单独使用包含了react-router的核心部分）

2.ReactRouter中提供了以下三大组件：
  (1)Router是所有路由组件共用的底层接口组件，它是路由规则制定的最外层的容器。
  (2)Route组件定义了URL路径与组件的对应关系。
  		Route组件的path属性指定路由的匹配规则。这个属性是可以省略的，这样的话，不管路径是否匹配，总是会加载指定组件。
  (3)Link路由跳转的组件。

3.<BrowserRouter>和<HashRouter>两个组件,前者在你有服务器处理动态请求的时候使用，后者在静态网站的时候使用。

4.由 <Route> 渲染的元素将会带有一系列的 props，有 match 对象，当前的 location 对象，history 对象
  当路由与路径匹配的时候，一个具有以下属性的 match 对象将会被作为 prop 传入
	url  // 当前路径与路由相匹配的部分
	path  // 路由的path
	isExact  // path === pathname
	params  // 一个包含着 pathname 被 path-to-regexp 捕获的对象 (例如/user/:id，则params是{ id: '123' })
	
5.页面导航
(1)<Link to="/about">About</Link> 或 <Link to={{ pathname: '/about', search: '?sort=name', hash:'#the-hash', state: { fromHome: true} }}> </Link>
(2)使用 history 对象手动实现导航, <div onClick={this.props.history.push('/about')}></div>
(3)<a> 标签导航，将会载入一整个新的页面 <a href="/about"></a>

6.<NavLink>是<Link>的特殊版本，当它与当前URL匹配时，它将为呈现的元素添加样式属性。导航链接应该使用 NavLink 而不再是 Link 
<NavLink exact to="/faq" activeClassName="selected" activeStyle={{color: 'blue'}}> FAQs </NavLink>

7.Switch: 为了解决route的唯一渲染，它是为了保证路由只渲染一个路径。
  exact:  只有页面的路由和<Route>的path属性精确比对后完全相同该<Route>才会被渲染。
  <Route path='/' component={}/>: path='/'匹配所有页面
  匹配规则： url中包含path就会被匹配到
